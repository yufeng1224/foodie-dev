架构师体系课 ———— 课程介绍
   1. 单体 -> 集群 -> 分布式 -> 微服务 -> 容器化
   2. 最终打造成高可用、 高并发、 高性能的互联网大型项目
   3. 亲历千万级项目从0到1, 再到100成长全过程全能提升课程
   4. 覆盖80%以上大厂核心技术, 对标阿里P6/P7晋级要求, 深广兼备的系统进修课程
   5. 他人5~8年才能积累到的经验, 你只需要10个月突破瓶颈
   6. 仅代码价值就远超课程学费
   7. 周密的学习计划, 学练结合, 社群讨论、问答区、直播互动、直播简历规划与指导、高端职位内推机会
   8. 一门不可多得的稀有课程


涉及到的技术栈:
   1. SpringBoot
   2. MyBatis
   3. Redis
   4. Nginx
   5. ES搜索引擎

   6. FastDFS文件存储
   7. 分布式会话
   8. 单点登录
   9. RabbitMQ消息队列
   10. Kafka消息队列

   11. MyCAT
   12. Sharding-JDBC
   13. 分布式锁设计
   14. 分布式全局ID设计
   15. 分布式事务和数据一致性

   16. 接口幂等性设计
   17. 分布式限流
   18. SpringCloud G版微服务
   19. Docker
   20. K8S

   21. 容器弹性扩缩容
   22. Netty
   23. JVM性能调优
   24. MySql性能调优
   25. 应用程序性能调优

   26. Tomcat性能调优
   27. Linux性能调优
   28. 架构调优


课程适合人群:
   1. 如果你具备1年以上Java开发经验, 需要快速提升竞争力
   2. 如果你缺乏Java整体认知, 想要建立完善的知识体系
   3. 如果你梦想进入BATJ等名企, 渴望掌握大厂核心技术
   4. 如果你跳槽屡屡碰壁, 急需短时间精进, 跳槽拿高薪
   5. 如果你有意深耕Java技术, 立志成为Java架构师

------------------------------------------------------------------------------------------------------------------------
架构师需要具备的能力
   1. 技术全面, 有广度
   2. 关注前沿技术
   3. 全局观、预判
   4. 把控团队, 忙而不乱
   5. 系统分解与模块拆分
   6. 指导与培训
   7. 沟通与协调能力
   8. 抽象、举例、画图
   9. 软技能: 具备把握业务边界、谈判等能力


讲师擅长领域
   1. 业务架构设计、分布式系统架构设计、性能优化等
   2. 集群、分布式系统结构设计、项目管理
   3. 系统架构，应用架构和基础组件架构设计，对高并发、高可用、分布式系统设计有着丰富的实战经验, 精通互联网Java主流技术
   4. 电商系统的架构设计, 分布式系统等
   5. 擅长基于互联网电商场景的高并发、高可用系统架构与设计

   6. 擅长系统优化、互联网转型和非功能性架构设计, 精通容器编排部署和微服务管理
   7. 集群, 分布式架构设计与落地, 微服务架构设计与落地, 性能优化


风间影月
   1. 擅长领域: 集群, 分布式系统架构设计, 项目管理
   2. 主要负责课程部分: 单体项目实战, Nginx集群, 分布式缓存Redis, 分布式会话与单点登录, 分布式文件系统, 分布式搜索Elasticsearch


Geely
   1. 擅长领域: 业务架构设计、分布式系统架构设计, 性能优化等
   2. 主要负责课程部分: 课程总设计和技术总顾问


阿神
   1. 擅长领域: 系统架构, 应用架构和基础组件架构设计, 对高并发、高可用、分布式系统有着丰富的实战经验, 精通互联网Java主流技术
   2. 主要负责课程部分: 分布式架构设计——消息中间件, 微服务架构设计——Sentinel哨兵; 高性能架构设计——Netty实战&RPC框架实战


凌波微步
   1. 擅长领域: 电商系统的架构设计, 分布式系统等
   2. 主要负责课程部分: 分布式锁、分库分表、分布式事务、分布式全局id、幂等性操作


姚半仙
   1. 擅长领域: 擅长基于互联网电商场景的高并发、高可用系统架构与设计
   2. 主要负责课程部分: 分布式架构设计-分布式限流、 微服务架构设计-服务治理, 负载均衡、服务间通信与调用、降级熔断, 分布式配置中心、
      消息总线、服务网关, 调用链追踪, 消息驱动组件, dubbo


张飞杨
   1. 擅长领域: 擅长系统优化、互联网转型和非功能性架构设计, 精通容器编排部署和微服务管理
   2. 主要负责课程部分: 容器化落地-Docker & Cloud Foundry, 容器编排管理-Mesos & Marathon & Kubernetes,
      容器弹性扩缩容 - 多解决方案混合使用

大目
   1. 擅长领域: 集群、分布式架构设计与落地、微服务架构设计与落地，性能优化
   2. 主要负责课程部分: JVM性能优化、MySql性能优化, Tomcat性能优化, Linux性能优化

------------------------------------------------------------------------------------------------------------------------
课程安排:
   1. 阶段一: 单体项目开发与上线(1~5周)
   2. 阶段二: 从单体到高可用集群演进(6~8周)
   3. 阶段三: 逐个击破分布式核心问题(9-17周)
   4. 阶段四: SpringCloud G版微服务(18~25周)
   5. 阶段五: Docker, K8S容器化(26~30周)
   6. 阶段六: Netty与性能调优(31~40周)


阶段一: 单体项目开发与上线(1~5周)
   1. 第1周: 万丈高楼, 地基首要
   2. 第2周: 分类、推荐、搜索、评价、购物车开发
   3. 第3周: 收货地址, 订单、支付、定时任务开发
   4. 第4周: 用户中心, 订单/评价管理开发
   5. 第5周: 云服务器部署上线


阶段二: 从单体到高可用集群演进(6~8周)
   1. 第6周: LVS + KeepAlived + nginx 实现高可用集群
   2. 第7周: 主从复制高可用Redis集群
   3. 第8周: Redis缓存雪崩, 穿透


阶段三: 逐个击破分布式核心问题(9-17周)
   1. 第9周:  分布式会话与单点登录SSO
   2. 第10周: 分布式搜索引擎-Elasticsearch
   3. 第11周: 分布式文件系统-FastDFS + 阿里云OSS
   4. 第12周: 分布式消息队列-RabbitMQ
   5. 第13周: 分布式消息队列-Kafka
       (海量日志收集的场景, 使用kafka+ELK技术栈, 分布式日志系统)

   6. 第14周: 分布式锁
   7. 第15周: 读写分离、分库分表-MyCAT 和 Sharding-JDBC
   8. 第16周: 分布式全局唯一主键ID、分布式事务和数据一致性
   9. 第17周: 分布式接口幂等性, 分布式限流


阶段四: SpringCloud G版微服务(18~25周)
   1. 第18周: 微服务架构认知、服务治理-Eureka
   2. 第19周: 负载均衡-Ribbon、服务通信与调用-Feign
   3. 第20周: 服务容错-Hystrix
       (服务降级、线程隔离)
   4. 第21周: 分布式配置中心-Config
       (系统运行期间,动态的变更属性)
   5. 第22周: 消息总线-Bus、服务网关-Gateway
       (所有的路由逻辑,黑名单、白名单)

   6. 第23周: 服务调用链追踪-Sleuth、消息驱动-Stream
   7. 第24周: 微服务下Sentinel流量防伪卫兵
   8. 第25周: 服务治理下的另一条路 - Dubbo


阶段五: Docker, K8S容器化(26~30周)
   1. 第26周: 服务容器化-Docker
   2. 第27周: 容器技术-Cloud Foundry
   3. 第28周: 容器编排-Mesos + Marathon
   4. 第29周: 容器编排-K8s
   5. 第30周: 容器弹性扩缩容架构思路


阶段六: Netty与性能调优(31~40周)
   1. 第31周: 高性能网络通信基石-Netty入门与提高
   2. 第32周: 高性能网络通信基石-Netty最佳实战
   3. 第33周: 基于Netty打造自己的RPC通信框架-1
   4. 第34周: 基于Netty打造自己的RPC通信框架-2
   5. 第35周: 应用监控与调优-工具篇

   6. 第36周: 应用监控与调优-技巧与实战篇
   7. 第37周: JVM性能调优-工具篇
   8. 第38周: JVM性能调优-实战篇
   9. 第39周: 数据库监控与调优
   10. 第40周: Linux调优与架构调优

------------------------------------------------------------------------------------------------------------------------
大型网站架构演进历程 ———— https://blog.csdn.net/kuangxie4668/article/details/103761812
   1. 文件服务器和数据库服务器分别部署, 降压
   2. 用户查询量大, 增加一个缓存中间件, 去查询数据, 不直接访问数据库。 没有才去访问数据库
      (用户绝大多数的查询都会落在缓存库里面, 而不是直接落到数据库, 这样请求响应会加快)
   3. 解决单点: 负载均衡, 应用集群。 (应用部署在多个tomcat中), 还有文件服务器集群， 缓存集群
   4. 网站用户达到百万、千万级别的时候, 数据库就成为瓶颈。解决方案: 数据库读写分离, 主库写数据,
      从库读数据。(两台服务器)  重点: 数据同步! 定期更新

   5. 进一步, 分库分表。 主-数据库集群; 从-数据库集群。 也称为分布式数据库
      单表的数据到700W~800W就要开始考虑这么做了! 数据库性能会急剧下降
      注意: 分布式主键
   6. 搜索引擎技术: solar, es
   7. 微服务: 服务集群。 服务进行拆分。 (分布式事务, 考虑的问题)
   8. JVM调优、Tomcat调优、数据库调优


大型网站的设计宗旨
   1. 合久必分: 最初MVC就是把系统拆为 M(model)、V(view)、C(controller)这三块, 通过不同的包名来进行区分和分层,
      分层也是最常见的一种架构模式, 不论用什么语言开发都会面临分层, 这是无处不在的一种模式, 而且分层也便于代码的解耦以及合理的工作分配。
      在我们的项目里, 我们会通过Maven来对项目进行聚合分层

   2. 集群: 集群是高可用和负载均衡的手段, 多台服务器节点部署相同的应用构成一个集群, 保证负载均衡的同时提升系统的可用性, 互相灾备

   3. CDN: 之前我们也说了, 大型网站的用户群体是分散在全国各地的。 所以, 网站一旦发展到很庞大的时候, 就会采用CDN, 这样不论用户在哪里都能
      够访问到最近的服务节点, 这样就不会因为距离而使得用户请求速度变慢

   4. 分布式系统: 一个大型网站势必由多系统、多模块、多中间件、多服务器等共同整合的一个整体。 在分布式领域里, 我们会接触到分布式架构、
      分布式文件系统、 分布式事务、分布式配置、分布式限流、日志收集等等

   5. 异步: 异步是最常见的优化用户体验的一种方式。 前端可以采用 Ajax 异步调用, 减少页面刷新; 后端采用生产者和消费者模式, 对代码进行解耦,
      如此就会使用到消息队列, 常见的消息队列为: RabbitMQ、 RocketMQ、 ActiveMQ、 Kafka等, 合理地使用消息队列, 可以在高并发时进行流量削峰,
      以达到保护自己的作用

   6. 业务分离: 一个大型网站的业务会有很多, 用户、订单、商品、支付等等,那么这些模块都可以合理的进行分离, 独立出一个子系统或子服务让某个
      专门的团队来负责, 我们会在微服务阶段进行讲解

   7. 数据备份: 在大型网站多服务器运维的情况下, 节点宕机是非常常见的, 一旦宕机, 我们所要做的就是数据的备份, 不能因为宕机了而导致数据丢失。
      所以,定期为数据库做好冷热备份, 做好主从, 以此达到系统的高可用性

------------------------------------------------------------------------------------------------------------------------
异构系统的整合
   1. 解决方案①: 由框架实现异构编程, 比如dubbo, 现在就是走的这个路子。不过这种异构编程还是有局限性的, 比如想用php, dubbo就不支持。
      那么就得放弃

   2. 解决方案②: 代理模式, 弄个服务, 代理异构微服务。 其实本质上是一种欺骗注册中心的玩法。 spring cloud 走了这条路。 这条玩法的好处是
      实施成本低, 另外真正实现了异构完美整合。 我指的完美, 具体值服务之间调用有负载均衡, 高并发有容错, 另外还有服务发现机制。
      不过缺点也很明显, 因为存在转发, 性能有一定下降, 另外增加了部署运维的成本

   3. 解决方案③: 平台实现异构, 比如用k8s实现异构。

   4. 异构系统是什么?
      4-1 不同的组成部分构成，不同的领域不同的解释。
      4-2 举例来说: java实现的系统和python实现的系统叫做异构系统; mysql与oracle基于不同的数据库管理系统，叫做异构数据库

------------------------------------------------------------------------------------------------------------------------
项目开始前准备工作:
   1. PDMan 数据库建模工具下载。 也有Windows版的, 下次可以放到行内电脑上去(已安装)
      1-1 发现PDMan不好的地方是，它的长度都固定了, 不灵活

   2. MYSQL navicat premium下载
   3. mysql 准备


数据库物理外键移除原因讲解
   1. 性能影响
   2. 热更新
      2-1 分布式环境下, 绝大部分项目是要进行热更新的
      2-2 热更新: 不停机去进行维护

   3. 降低耦合度
      3-1 可以降低表和表之间的耦合度, 物理外键不需要去设置了
      3-2 外键是强一致性的, 和分布式系统相冲突
      3-3 可以设置逻辑外键

   4. 数据分库分表
      4-1 大型系统里面有多个系统的
      4-2 有外键关联, 不适合做分库分表

   5. 一开始进行项目开发的时候, 就会提出来弃用数据库物理外键。 这一点是要明确的!
   6. 数据库相关文件: foodie-dev.pdman.json, foodie-shop-dev.sql


todo
   1. 数据库三范式掌握
   2. 热更新
   3. springBoot 框架掌握


不过接下来要先学习数据库, 然后再学习JDBC, 接着到数据源、 Mybatis。 要保证体系化学习!

------------------------------------------------------------------------------------------------------------------------






















