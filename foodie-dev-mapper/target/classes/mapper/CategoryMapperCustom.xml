<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yufeng.mapper.CategoryMapperCustom" >

    <!-- 这样子查询出来的重复数据会合并, 而3级的subCatList会查出多条 -->
    <!-- 数据样式见: myCategoryVO.json -->
    <resultMap id="myCategoryVO" type="com.yufeng.pojo.vo.CategoryVO">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="type" property="type" />
        <result column="fatherId" property="fatherId" />

        <!--  collection 标签: 用于定义关联的list集合类型的封装规则
              property: 对应三级分类的list属性名
              ofType: 集合的类型, 三级分类的vo
              -->
        <collection property="subCatList" ofType="com.yufeng.pojo.vo.SubCategoryVO">
            <id column="subId" property="subId" />
            <result column="subName" property="subName" />
            <result column="subType" property="subType" />
            <result column="subFatherId" property="subFatherId" />
        </collection>
    </resultMap>


    <resultMap id="myNewItemsVO" type="com.yufeng.pojo.vo.NewItemsVO">
        <id column="rootCatId" property="rootCatId" />
        <result column="rootCatName" property="rootCatName" />
        <result column="slogan" property="slogan" />
        <result column="catImage" property="catImage" />
        <result column="bgColor" property="bgColor" />

        <!--  collection 标签: 用于定义关联的list集合类型的封装规则
              property: 对应三级分类的list属性名
              ofType: 集合的类型, 三级分类的vo
              -->
        <collection property="simpleItemList" ofType="com.yufeng.pojo.vo.SimpleItemVO">
            <id column="itemId" property="itemId" />
            <result column="itemName" property="itemName" />
            <result column="itemUrl" property="itemUrl" />
        </collection>
    </resultMap>

    <!-- left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 -->
    <select id="getSubCatList" parameterType="int" resultMap="myCategoryVO">
        SELECT
            f.id as id,
            f.name as name,
            f.type as type,
            f.father_id as fatherId,
            c.id as subId,
            c.name as subname,
            c.type as subtype,
            c.father_id as subFatherId
        FROM
            category f
        LEFT JOIN
            category c
        ON
            f.id = c.father_id
        WHERE
            f.father_id = #{rootCatId};
    </select>


    <select id="getSixNewItemLazy" resultMap="myNewItemsVO" parameterType="Map">
        SELECT
       		f.id as rootCatId,
       		f.name as rootCatName,
       		f.slogan as slogan,
       		f.cat_image as catImage,
       		f.bg_color as bgColor,
       		i.id as itemId,
       		i.item_name as itemName,
       		ii.url as itemUrl,
       		i.created_time as createdTime
        FROM
            category f
        LEFT JOIN items i ON f.id = i.root_cat_id
        LEFT JOIN items_img ii ON i.id = ii.item_id
        WHERE
           f.type = 1
        AND
           i.root_cat_id = #{paramsMap.rootCatId}
        AND
           ii.is_main = 1
        ORDER BY
           i.created_time
        DESC
        LIMIT 0, 6;

    </select>


</mapper>